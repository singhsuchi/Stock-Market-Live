{"ast":null,"code":"import _classCallCheck from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/suchitanew/Downloads/stocks-master/src/components/StocksGraph.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport * as zoom from 'chartjs-plugin-zoom';\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js';\n\nvar StocksGraph =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StocksGraph, _React$Component);\n\n  function StocksGraph() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StocksGraph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StocksGraph)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.updateChart = function () {\n      var chart = _this.refs.chart.chartInstance;\n\n      if (Object.keys(_this.props.stocks).length === 0) {\n        chart.data.datasets = [];\n        return chart.update();\n      }\n\n      Object.keys(_this.props.stocks).map(function (stock_name, index) {\n        var current_stock = _this.props.stocks[stock_name];\n        var chart_dataset = chart.data.datasets.find(function (dataset) {\n          return dataset.label === stock_name.toUpperCase();\n        });\n\n        if (current_stock.is_selected) {\n          var _current_stock = _this.props.stocks[stock_name];\n\n          if (chart_dataset) {\n            // only update the data, don't create a new dataset for the graph\n            chart_dataset.data = _this.getStockValues(_current_stock);\n          } else {\n            // create a new dataset for graph\n            if (_current_stock) {\n              chart.data.datasets = chart.data.datasets.concat([chartDataset(stock_name, chartColors[index], _this.getStockValues(_current_stock))]);\n            }\n          }\n        } else {\n          if (chart_dataset) {\n            // remove the dataset from graph\n            chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n          }\n        }\n\n        chart.update();\n      });\n    };\n\n    _this.componentDidUpdate = function () {\n      _this.updateChart();\n    };\n\n    _this.getStockValues = function (stock) {\n      return stock.history.map(function (history) {\n        return {\n          t: new Date(history.time),\n          y: history.value\n        };\n      });\n    };\n\n    _this.resetZoom = function () {\n      _this.refs.chart.chartInstance.resetZoom();\n    };\n\n    return _this;\n  }\n\n  _createClass(StocksGraph, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: 'card column',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-header-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Graph\")), React.createElement(\"div\", {\n        className: \"card-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"is-size-7 has-text-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.refs.chart && this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'), React.createElement(\"button\", {\n        className: \"button is-small is-pulled-right\",\n        onClick: this.resetZoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Reset zoom\"), React.createElement(Line, {\n        data: {\n          datasets: []\n        },\n        options: chartJsConfig,\n        ref: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return StocksGraph;\n}(React.Component);\n\nexport default StocksGraph;","map":{"version":3,"sources":["/Users/suchitanew/Downloads/stocks-master/src/components/StocksGraph.jsx"],"names":["React","Line","zoom","chartJsConfig","chartColors","chartDataset","StocksGraph","updateChart","chart","refs","chartInstance","Object","keys","props","stocks","length","data","datasets","update","map","stock_name","index","current_stock","chart_dataset","find","dataset","label","toUpperCase","is_selected","getStockValues","concat","splice","indexOf","componentDidUpdate","stock","history","t","Date","time","y","value","resetZoom","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport * as zoom from 'chartjs-plugin-zoom'\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  // too big a function?\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n\n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  resetZoom = () => {\n    this.refs.chart.chartInstance.resetZoom();\n  }\n\n  render() {\n    return (\n      <div className={'card column'} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Graph\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'\n            }\n          </p>\n          <button className=\"button is-small is-pulled-right\" onClick={this.resetZoom}>Reset zoom</button>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;"]},"metadata":{},"sourceType":"module"}