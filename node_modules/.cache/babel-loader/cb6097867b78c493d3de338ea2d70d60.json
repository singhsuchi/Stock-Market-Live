{"ast":null,"code":"import _classCallCheck from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/suchitanew/Downloads/stocks-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/suchitanew/Downloads/stocks-master/src/components/Dashboard.jsx\";\nimport React from 'react';\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport Status from \"./Status.jsx\";\nvar stocksUrl = 'ws://stocks.mnet.website/';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n      stocks: {},\n      connectionError: false\n    };\n\n    _this.componentDidMount = function () {\n      _this.connection = new WebSocket(stocksUrl);\n      _this.connection.onmessage = _this.saveNewStockValues;\n\n      _this.connection.onclose = function () {\n        _this.setState({\n          connectionError: true\n        });\n      };\n    };\n\n    _this.saveNewStockValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = JSON.parse(event.data);\n      var up_values_count = 0,\n          down_values_count = 0; // time stored in histories should be consisitent across stocks(better for graphs)\n\n      var current_time = Date.now();\n      var new_stocks = _this.state.stocks;\n      result.map(function (stock) {\n        // stock = ['name', 'value']\n        if (_this.state.stocks[stock[0]]) {\n          new_stocks[stock[0]].current_value = Number(stock[1]);\n          new_stocks[stock[0]].history.push({\n            time: current_time,\n            value: Number(stock[1])\n          });\n        } else {\n          new_stocks[stock[0]] = {\n            current_value: stock[1],\n            history: [{\n              time: Date.now(),\n              value: Number(stock[1])\n            }]\n          };\n        }\n      });\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.resetData = function () {\n      var new_stocks = _this.state.stocks;\n      Object.keys(_this.state.stocks).map(function (stock_name, index) {\n        new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n      });\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.areStocksLoaded = function () {\n      return Object.keys(_this.state.stocks).length > 0;\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(StocksList, {\n        stocks: this.state.stocks,\n        resetData: this.resetData,\n        areStocksLoaded: this.areStocksLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: this.props.showSpinner ? 'modal is-active' : 'modal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"modal-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Status, {\n        connectionError: this.state.connectionError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/suchitanew/Downloads/stocks-master/src/components/Dashboard.jsx"],"names":["React","bulma","StocksList","StocksGraph","Status","stocksUrl","Dashboard","state","stocks","connectionError","componentDidMount","connection","WebSocket","onmessage","saveNewStockValues","onclose","setState","event","props","hideSpinner","result","JSON","parse","data","up_values_count","down_values_count","current_time","Date","now","new_stocks","map","stock","current_value","Number","history","push","time","value","resetData","Object","keys","stock_name","index","pop","areStocksLoaded","length","showSpinner","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport Status from \"./Status.jsx\";\n\nconst stocksUrl = 'ws://stocks.mnet.website/';\n\nclass Dashboard extends React.Component {\n\n  state = {\n  // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n   stocks: {},\n   connectionError: false\n  }\n\n  componentDidMount = () => {\n    this.connection = new WebSocket(stocksUrl);\n    this.connection.onmessage = this.saveNewStockValues;\n    this.connection.onclose = () => { this.setState({connectionError: true}) }\n  }\n\n  saveNewStockValues = (event) => {\n    this.props.hideSpinner();\n    let result = JSON.parse(event.data);\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let current_time = Date.now();\n    let new_stocks = this.state.stocks\n    result.map((stock) =>\n    {\n      // stock = ['name', 'value']\n      if(this.state.stocks[stock[0]])\n      {\n        \n\n        new_stocks[stock[0]].current_value = Number(stock[1])\n        new_stocks[stock[0]].history.push({time: current_time, value: Number(stock[1])})\n      }\n      else\n      {\n        new_stocks[stock[0]] = { current_value: stock[1], history: [{time: Date.now(), value: Number(stock[1])}] }\n      }\n    });\n    this.setState({stocks: new_stocks})\n  }\n\n  \n\n  \n\n  resetData = () => {\n    let new_stocks = this.state.stocks;\n    Object.keys(this.state.stocks).map((stock_name, index) =>\n    {\n      new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n    });\n    this.setState({ stocks: new_stocks });\n  }\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='columns'>\n          <StocksList\n            stocks={this.state.stocks}\n            resetData={this.resetData}\n            areStocksLoaded={this.areStocksLoaded}\n          />\n          \n        </div>\n        <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n          <div className=\"modal-background\"></div>\n          <div className=\"modal-content\">\n            <Status connectionError={this.state.connectionError} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}